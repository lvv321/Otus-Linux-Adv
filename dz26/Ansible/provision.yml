---
- name: setup postgresql cluster
  hosts: node1, node2
  become: yes
  
  vars_files:
    - defaults/main.yml
  
  tasks:
    - name: install postgresql
      apt:
        name:
          - postgresql
        state: present
        update_cache: true

    - name: install additional modules on master
      apt:
        name:
          - acl
          - python3-psycopg2
        state: present
        update_cache: true
      when: (ansible_hostname == "node1")

    - name: install additional modules on slave
      apt:
        name:
          - acl
        state: present
        update_cache: true
      when: (ansible_hostname == "node2")
    
    - name: enable and start postgresql service
      service:
        name: postgresql
        state: started
        enabled: true

    - name: create user for replication
      become_user: postgres
      
      postgresql_user:
        name: repuser
        password: '{{ repuser_password }}'
        role_attr_flags: REPLICATION 
      ignore_errors: true
      when: (ansible_hostname == "node1")

    - name: copy postgresql.conf to master
      template:
        src: postgresql.conf.j2
        dest: /etc/postgresql/14/main/postgresql.conf
        owner: postgres
        group: postgres
        mode: '0600'
      when: (ansible_hostname == "node1")

    - name: copy pg_hba.conf to master
      template:
        src: pg_hba.conf.j2
        dest: /etc/postgresql/14/main/pg_hba.conf
        owner: postgres
        group: postgres
        mode: '0600'
      when: (ansible_hostname == "node1")

    - name: restart postgresql-server on master
      service: 
        name: postgresql
        state: restarted
      when: (ansible_hostname == "node1")

    - name: stop postgresql-server on slave
      service: 
        name: postgresql
        state: stopped
      when: (ansible_hostname == "node2")

    - name: removing files from data catalog on slave
      file:
        path: /var/lib/postgresql/14/main
        state: absent
      when: (ansible_hostname == "node2")

    - name: copy files from master to slave
      become_user: postgres
      expect:
        command: 'pg_basebackup -h {{ master_ip }} -U repuser -p 5432 -D /var/lib/postgresql/14/main/ -R -P'
        responses: 
          '.*Password*': "{{ repuser_password }}"
      when: (ansible_hostname == "node2")

    - name: copy postgresql.conf to slave
      template:
        src: postgresql.conf.j2
        dest: /etc/postgresql/14/main/postgresql.conf
        owner: postgres
        group: postgres
        mode: '0600'
      when: (ansible_hostname == "node2")

    - name: copy pg_hba.conf to slave
      template:
        src: pg_hba.conf.j2
        dest: /etc/postgresql/14/main/pg_hba.conf
        owner: postgres
        group: postgres
        mode: '0600'
      when: (ansible_hostname == "node2")

    - name: start postgresql-server on slave
      service: 
        name: postgresql
        state: started
      when: (ansible_hostname == "node2")

- name: setup backup
  hosts: all
  become: yes
  
  vars_files:
    - defaults/main.yml
  
  tasks:
    - name: install soft on barman
      apt:
        name:
          - barman
          - postgresql
          - acl
          - python3-psycopg2
        state: present
        update_cache: true
      when: (ansible_hostname == "barman")

    - name: install barman-cli on all nodes
      apt:
        name:
          - barman-cli
        state: present
        update_cache: true

    - name: generate SSH key for postgres
      user:
        name: postgres
        generate_ssh_key: yes
        ssh_key_type: rsa
        ssh_key_bits: 4096
        force: no
      when: (ansible_hostname == "node1")

    - name: generate SSH key for barman
      user:
        name: barman
        uid: 994
        shell: /bin/bash
        generate_ssh_key: yes
        ssh_key_type: rsa
        ssh_key_bits: 4096
        force: no
      when: (ansible_hostname == "barman")

    - name: fetch all public ssh keys node1
      shell: cat /var/lib/postgresql/.ssh/id_rsa.pub
      register: ssh_keys
      when: (ansible_hostname == "node1")

    - name: transfer public key to barman
      delegate_to: barman
      authorized_key:
        key: "{{ ssh_keys.stdout }}"
        comment: "{{ansible_hostname}}"
        user: barman
      when: (ansible_hostname == "node1")

    - name: fetch all public ssh keys barman
      shell: cat /var/lib/barman/.ssh/id_rsa.pub
      register: ssh_keys
      when: (ansible_hostname == "barman")

    - name: transfer public key to barman
      delegate_to: node1
      authorized_key:
        key: "{{ ssh_keys.stdout }}"
        comment: "{{ansible_hostname}}"
        user: postgres
      when: (ansible_hostname == "barman")

    - name: create barman user
      become_user: postgres
      postgresql_user:
        name: barman
        password: '{{ barman_user_password }}'
        role_attr_flags: SUPERUSER 
      ignore_errors: true
      when: (ansible_hostname == "node1")

    - name: add permission for barman
      lineinfile:
        path: /etc/postgresql/14/main/pg_hba.conf
        line: 'host    all   {{ barman_user }}    {{ barman_ip }}/32    scram-sha-256'
      when: (ansible_hostname == "node1") or
            (ansible_hostname == "node2") 

    # Добавляем разрешения для подключения с хоста barman
    - name: Add permission for barman
      lineinfile:
        path: /etc/postgresql/14/main/pg_hba.conf
        line: 'host    replication   {{ barman_user }}    {{ barman_ip }}/32    scram-sha-256'
      when: (ansible_hostname == "node1") or
            (ansible_hostname == "node2") 

    # Перезагружаем службу postgresql-server
    - name: restart postgresql-server on node1
      service: 
        name: postgresql
        state: restarted
      when: (ansible_hostname == "node1")

    - name: create DB for backup
      become_user: postgres
      postgresql_db:
        name: mydb_bckp
        encoding: UTF-8
        template: template0
        state: present
      when: (ansible_hostname == "node1")

    - name: Add tables to mydb_bckp
      become_user: postgres
      postgresql_table:
        db: mydb_bckp
        name: test1
        state: present
      when: (ansible_hostname == "node1")

    - name: copy .pgpass
      template:
        src: .pgpass.j2
        dest: /var/lib/barman/.pgpass
        owner: barman
        group: barman
        mode: '0600'
      when: (ansible_hostname == "barman")

    - name: copy barman.conf
      template:
        src: barman.conf.j2
        dest: /etc/barman.conf 
        owner: barman
        group: barman
        mode: '0755'
      when: (ansible_hostname == "barman")

    - name: copy node1.conf
      template:
        src: node1.conf.j2
        dest: /etc/barman.d/node1.conf
        owner: barman
        group: barman
        mode: '0755'
      when: (ansible_hostname == "barman")

    - name: barman switch-wal node1
      become_user: barman
      shell: barman switch-wal node1
      when: (ansible_hostname == "barman")

    - name: barman cron
      become_user: barman
      shell: barman cron
      when: (ansible_hostname == "barman")